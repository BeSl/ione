 // Список запущенных моделей http://localhost:11434/api/ps
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Для каждого тПарам из Обработки.БотLLM.МетодыLLMСервера() Цикл
		
		НП = МетодыLLM.Добавить();
		НП.Наименование = тПарам.Наименование;
		НП.ТипЗапроса = тПарам.ТипЗапроса;
		НП.Путь = тПарам.Путь;

		
		//ЗаполнитьЗначенияСвойств(НП, тПарам);
		Для каждого тт из тПарам.Параметры Цикл
			ннп = НП.Параметры.Добавить();
			ннп.ИмяПараметра = тт.ИмяПараметра;
			ннп.Обязательный = тт.Обязательный;
		КонецЦикла;
			
	КонецЦикла;
	
	Элементы.РежимРаботы.СписокВыбора.Очистить();	
	Элементы.РежимРаботы.СписокВыбора.ЗагрузитьЗначения(ВариантыВзаимодействия()); 
	
	Элементы.РольВЧате.СписокВыбора.Очистить();  
	Элементы.РольВЧате.СписокВыбора.ЗагрузитьЗначения(ВзаимодействиеСLLM.РолиЧата());
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура МетодыLLMПриАктивизацииСтроки(Элемент)
	
	Метод = Элементы.МетодыLLM.ТекущиеДанные.Путь;  
	ТипЗапроса = Элементы.МетодыLLM.ТекущиеДанные.ТипЗапроса;  

КонецПроцедуры 

&НаКлиенте
Процедура СерверLLMПриИзменении(Элемент)
	ЗагрузитьСписокМоделей();
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыПриИзменении(Элемент)

	Элементы.ГруппаПараметрыЧата.Видимость = (РежимРаботы = "Чат");

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура Спросить(Команда)
	СпроситьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВопросКМодели(Команда)
	
	Если РежимРаботы = "Чат" Тогда
		ОтправитьЗапросВЧат();
	Иначе
		ВопросКМоделиНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокМоделей(Команда)
	ЗагрузитьСписокМоделей()
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОМодели(Команда)          
	
	Свойства = ИнформацияОМоделиНаСервере(МоделиСервера, СерверLLM);
	Уровень = 1;
	РаспечататьСвойства(Свойства, Уровень);	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьМодель(Команда)                   
	
	УдалитьМодельНаСервере(МоделиСервера, СерверLLM);
	
КонецПроцедуры

&НаКлиенте
Процедура СкачатьМодель(Команда)
	
	ВызватьИсключение "Не реализовано";

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсторию(Команда)
	
	ОтветТекст.Очистить();
	
КонецПроцедуры 

&НаКлиенте
Процедура НастройкиСервера(Команда)

	ОткрытьФорму("Обработка.БотLLM.Форма.ФормаИнфо");
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйЧат(Команда)
	
	Чат_История.Очистить();
	
КонецПроцедуры

#КонецОбласти 
 
#Область СлужебныеПроцедурыИФункции 
&НаСервере
Процедура ОтправитьЗапросВЧат()
	
	новыйВопрос = Чат_История.Добавить();	
	новыйВопрос.Роль = РольВЧате;
	новыйВопрос.Контент = ТекстВопроса;
	
	ПараметрыЧата = Новый Структура;
	ПараметрыЧата.Вставить("Модель", МоделиСервера);
	
	Ответ = ВзаимодействиеСLLM.ВопросВЧат(АдресСервера(СерверLLM), Чат_История, ПараметрыЧата);
	
	ОтветТекст.ДобавитьСтроку("Я: "+ТекстВопроса);
	ОтветТекст.ДобавитьСтроку("AI: "+Ответ["message"]["content"] + " ("+Ответ["message"]["role"]+")");
	ОтветТекст.ДобавитьСтроку(СтрокаРазделитель());
	
	новыйВопрос = Чат_История.Добавить();	
	новыйВопрос.Роль = Ответ["message"]["content"];
	новыйВопрос.Контент = Ответ["message"]["role"];
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияОМоделиНаСервере(МоделиСервера, Сервер)

	Возврат	ВзаимодействиеСLLM.СвойстваВыбраннойМодели(МоделиСервера, АдресСервера(Сервер));
	
КонецФункции

&НаСервереБезКонтекста
Функция УдалитьМодельНаСервере(МоделиСервера, СерверLLM)

	ВзаимодействиеСLLM.УдалитьМодель(МоделиСервера, АдресСервера(СерверLLM));

КонецФункции

&НаСервере
Процедура СпроситьНаСервере()
	
	КонтекстЗапроса = Новый Структура;
	
	ПараметрыЗапроса = МетодыLLM.НайтиСтроки(Новый Структура("Путь", Метод));
	Для каждого тПар из ПараметрыЗапроса[0].Параметры Цикл    
		Если не ЗначениеЗаполнено(тПар.Значение) Тогда
			Продолжить;
		КонецЕсли;
		КонтекстЗапроса.Вставить(тПар.ИмяПараметра, тПар.Значение);	
	КонецЦикла;
	
	ОтветМодели = ВзаимодействиеСLLM.ОтправитьЗапросСерверу(ТипЗапроса, АдресСервера(СерверLLM)+Метод, КонтекстЗапроса);
	ОтветТекст.ДобавитьСтроку(ОтветМодели);
	
	ИнфоОтвета = ПрочитатьЗначениеJSON(ОтветМодели);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресСервера(СерверLLM)
	
	Возврат Справочники.СерверыLLM.АдресСервераДляЗапросов(СерверLLM);
	
КонецФункции   

&НаКлиенте
Процедура ЗагрузитьСписокМоделей()

	Элементы.МоделиСервера.СписокВыбора.Очистить();
	Элементы.МоделиСервера.СписокВыбора.ЗагрузитьЗначения(СписокМоделейLLM(АдресСервера(СерверLLM))); 	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокМоделейLLM(АдресСервера)

	Возврат ВзаимодействиеСLLM.СписокДоступныхМоделей(АдресСервера);
	
КонецФункции

&НаСервере
Процедура ВопросКМоделиНаСервере()
	
	ПараметрыДиалога = Новый Структура;
	ПараметрыДиалога.Вставить("Модель", МоделиСервера);
	
	И_Вопрос = ВзаимодействиеСLLM.ДанныеДляВопроса(АдресСервера(СерверLLM), 
													ТекстВопроса, 
													ПараметрыДиалога); 
	
	ОтветМодели = ВзаимодействиеСLLM.ОтправитьЗапросСерверу(
												И_Вопрос.ТипЗапроса, 
													И_Вопрос.Адрес, 
														И_Вопрос.Промт);
	
	ОтветСтруктурой = ПрочитатьЗначениеJSON(ОтветМодели);  
	ОтветТекст.ДобавитьСтроку("->" + ТекущаяДата() + " Вопрос : " + ТекстВопроса);
	Если ОтветСтруктурой.Свойство("error") Тогда
		ОтветТекст.ДобавитьСтроку("<-" + ТекущаяДата() + "Ошибка выполнения:"+ОтветСтруктурой["error"]);
		Возврат;	
	КонецЕсли;
    
	ОтветТекст.ДобавитьСтроку("<-" + ТекущаяДата() + "Ответ :"+ОтветСтруктурой["response"]);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьСвойства(Свойства, Уровень)
	
	Если ТипЗнч(Свойства) = тип("Соответствие") Тогда
		Для каждого ТекСвойство из Свойства Цикл
			Если МожноПечатать(ТекСвойство.Значение) Тогда
				ОтветТекст.ДобавитьСтроку(НапечататьОтступы(Уровень)+ ТекСвойство.Ключ + " : "+ ТекСвойство.Значение);	
				Продолжить;
			КонецЕсли;                       
			ОтветТекст.ДобавитьСтроку(НапечататьОтступы(Уровень)+ ТекСвойство.Ключ + " : ");
			РаспечататьСвойства(ТекСвойство.Значение, Уровень + 1);
			
		КонецЦикла;
	ИначеЕсли ТипЗнч(Свойства) = тип("Массив") Тогда
		Для каждого ТекСвойство из Свойства Цикл
			Если МожноПечатать(ТекСвойство) Тогда
				ОтветТекст.ДобавитьСтроку(НапечататьОтступы(Уровень) + ТекСвойство);	
				Продолжить;
			КонецЕсли;                       
			
			РаспечататьСвойства(ТекСвойство, Уровень + 1);
			
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция МожноПечатать(КакоеТоЗначение)
	
	ТекТип = ТипЗнч(КакоеТоЗначение);
	
	Возврат (ТекТип = Тип("Число") 
	 или ТекТип = Тип("Строка")
	 Или ТекТип = Тип("Булево"));
	
КонецФункции 
 
&НаКлиенте
Функция НапечататьОтступы(Уровень)
	
	Итог = "";
	сч = 0;
	Пока сч<Уровень Цикл
		Итог = Итог + "=";
		сч = сч+1;
	КонецЦикла;	 
	
	Возврат Итог + ">";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВариантыВзаимодействия()
	
	ВариантыВзаимодействияLLM = Новый Массив;
	ВариантыВзаимодействияLLM.Добавить("Вопросы");
	ВариантыВзаимодействияLLM.Добавить("Чат");
	
	Возврат ВариантыВзаимодействияLLM;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаРазделитель()
	
	Возврат "==============================//==============================";
	
КонецФункции

&НаКлиенте
Процедура вб_ТестСоединения(Команда)
	вб_ТестСоединенияНаСервере();
КонецПроцедуры

&НаСервере
Процедура вб_ТестСоединенияНаСервере()
	Результат = ХромаБД.ВерсияСервера();
	
	ХромаОтветы.ДобавитьСтроку(Результат);
КонецПроцедуры

&НаКлиенте
Процедура вб_СоздатьПространство(Команда)
	вб_СоздатьПространствоНаСервере();
КонецПроцедуры

&НаСервере
Процедура вб_СоздатьПространствоНаСервере()
	Рез = ХромаБД.ДобавитьПространство("myorg2");
	ХромаОтветы.ДобавитьСтроку("" +РЕз.КодОтвета + " - "+ Рез.Ответ);
КонецПроцедуры

#КонецОбласти








