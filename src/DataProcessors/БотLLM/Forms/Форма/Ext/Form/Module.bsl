 // Список запущенных моделей http://localhost:11434/api/ps
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Для каждого тПарам из Обработки.БотLLM.МетодыLLMСервера() Цикл
		
		НП = МетодыLLM.Добавить();
		НП.Наименование = тПарам.Наименование;
		НП.ТипЗапроса = тПарам.ТипЗапроса;
		НП.Путь = тПарам.Путь;

		
		//ЗаполнитьЗначенияСвойств(НП, тПарам);
		Для каждого тт из тПарам.Параметры Цикл
			ннп = НП.Параметры.Добавить();
			ннп.ИмяПараметра = тт.ИмяПараметра;
			ннп.Обязательный = тт.Обязательный;
		КонецЦикла;
			
	КонецЦикла;
	
	Элементы.РежимРаботы.СписокВыбора.Очистить();	
	Элементы.РежимРаботы.СписокВыбора.ЗагрузитьЗначения(ВариантыВзаимодействия()); 
	
	Элементы.РольВЧате.СписокВыбора.Очистить();  
	Элементы.РольВЧате.СписокВыбора.ЗагрузитьЗначения(ВзаимодействиеСLLM.РолиЧата());
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура МетодыLLMПриАктивизацииСтроки(Элемент)
	
	Метод = Элементы.МетодыLLM.ТекущиеДанные.Путь;  
	ТипЗапроса = Элементы.МетодыLLM.ТекущиеДанные.ТипЗапроса;  

КонецПроцедуры 

&НаКлиенте
Процедура СерверLLMПриИзменении(Элемент)
	ЗагрузитьСписокМоделей();
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыПриИзменении(Элемент)

	Элементы.ГруппаПараметрыЧата.Видимость = (РежимРаботы = "Чат");

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура Спросить(Команда)
	СпроситьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВопросКМодели(Команда)
	
	ТекущийСтатусОбработки = 0;
	ПодключитьОбработчикОжидания("ПроверитьСостояниеКоманды",1,Ложь); 
	
	ОтправитьНаГенерациюОтвета(); 

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокМоделей(Команда)
	ЗагрузитьСписокМоделей()
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОМодели(Команда)          
	
	Свойства = ИнформацияОМоделиНаСервере(МоделиСервера, СерверLLM);
	Уровень = 1;
	РаспечататьСвойства(Свойства, Уровень);	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьМодель(Команда)                   
	
	УдалитьМодельНаСервере(МоделиСервера, СерверLLM);
	
КонецПроцедуры

&НаКлиенте
Процедура СкачатьМодель(Команда)
	
	ВызватьИсключение "Не реализовано";

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсторию(Команда)
	
	ОтветТекст.Очистить();
	
КонецПроцедуры 

&НаКлиенте
Процедура НастройкиСервера(Команда)

	ОткрытьФорму("Обработка.БотLLM.Форма.ФормаИнфо");
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйЧат(Команда)
	
	Чат_История.Очистить();
	
КонецПроцедуры

#КонецОбласти 
 
#Область СлужебныеПроцедурыИФункции 

Функция ПривестиДиалогКФормату(Диалог)

	ДиалогМассивом = Новый Массив;
	КлючиСообщения = "role,content";  
	
	Для каждого СообщениеДиалога из Диалог Цикл
		НовоеСообщение = Новый Структура(КлючиСообщения);
		НовоеСообщение["role"]   = СообщениеДиалога.Роль;
		НовоеСообщение["content"] = СообщениеДиалога.Контент; 
		
		ДиалогМассивом.Добавить(НовоеСообщение);	
	КонецЦикла;
	
	Возврат ДиалогМассивом;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьНаГенерациюОтвета()

	ВыполнитьЗапросВФоне(РежимРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСостояниеКоманды()

	ТекущийСтатусОбработки = ТекущийСтатусОбработки + 1;
	
	ОбновитьКомандуВопросаКМодели(ТекущийСтатусОбработки);
	Если ТекущийСтатусОбработки >= 4 Тогда
		ТекущийСтатусОбработки = 0;
	КонецЕсли;
		
	Результат = РегламентОтработал(КлючРегламента);

	Если Результат <> Неопределено Тогда
		
		ОтключитьОбработчикОжидания("ПроверитьСостояниеКоманды");
		ТекущийСтатусОбработки = 0;
		Элементы.ВопросКМодели.Картинка = БиблиотекаКартинок.ОтправитьСообщение;
		Элементы.ВопросКМодели.Заголовок = "Спросить";
		
		Если Результат.Свойство("Ошибка") Тогда
			ОтветТекст.ДобавитьСтроку("AI :"+ Результат.Ошибка);
			ОтветТекст.ДобавитьСтроку(СтрокаРазделитель());
			Возврат;
		КонецЕсли; 

		Если РежимРаботы = "Чат" Тогда
			ОтветТекст.ДобавитьСтроку("AI :"+ Результат.Ответ["message"]["content"] + " ("+Результат.Ответ["message"]["role"]+")");
			новыйВопрос = Чат_История.Добавить();	
			новыйВопрос.Роль = Результат.Ответ["message"]["content"];
			новыйВопрос.Контент = Результат.Ответ["message"]["role"];	
		Иначе
			ОтветТекст.ДобавитьСтроку("AI :"+ Результат.Ответ["response"]);
		КонецЕсли;
		ОтветТекст.ДобавитьСтроку(СтрокаРазделитель());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РегламентОтработал(КлючРегламента)
	
	РезультатРегламента = Неопределено;
	Регламенты = ФоновыеЗадания.ПолучитьФоновыеЗадания(НОвый Структура("Ключ", КлючРегламента));
	
	Если Регламенты.Количество() >0  Тогда  
		
		ФонЗадача = Регламенты[0];                
		
		Если ФонЗадача.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			Возврат РезультатРегламента;
		КонецЕсли;
		
		Если ФонЗадача.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда   

			РезультатРегламента = Новый Структура;
			РезультатРегламента.Вставить("Ошибка","Ошибка выполнения задания"); 
			
			Возврат РезультатРегламента;
		КонецЕсли;
		
		Ответ = ПолучитьИзВременногоХранилища(РезультатАсинх);
		
		РезультатРегламента = Новый Структура;	
		Если Ответ.Свойство("error") Тогда

			РезультатРегламента.Вставить("Ошибка", Ответ["error"]);

		Иначе
			РезультатРегламента.Вставить("Ответ",Ответ);
		КонецЕсли;	
		
	КонецЕсли;

    Возврат РезультатРегламента;

КонецФункции

&НаСервере
Процедура ВыполнитьЗапросВФоне(РежимРаботы)

	Если РежимРаботы = "Чат" Тогда
		ПараметрыЗапроса = ПараметрыЗапросаВЧат();	
   	Иначе
		ПараметрыЗапроса = ПараметрыЗапросаВопрос();
	КонецЕсли;    
	
	РезультатАсинх = ПараметрыЗапроса.Результат;
	
	КлючРегламента = Строка(Новый УникальныйИдентификатор);	
	
	ФоновыеЗадания.Выполнить(ПараметрыЗапроса.МетодКонфигурации, 
							ПараметрыЗапроса.ПараметрыРегламента,
								КлючРегламента,
									ПараметрыЗапроса.ИмяРегламента);  
	
	
	ОтветТекст.ДобавитьСтроку("Я: "+ТекстВопроса);
		
КонецПроцедуры

&НаСервере
Функция ПараметрыЗапросаВЧат()
	
	ПараметрыЗапроса = Новый Структура;
	
	новыйВопрос = Чат_История.Добавить();	
	новыйВопрос.Роль = РольВЧате;
	новыйВопрос.Контент = ТекстВопроса;
	
	ПараметрыЧата = Новый Структура;
	ПараметрыЧата.Вставить("Модель", МоделиСервера);
	ПараметрыЧата.Вставить("Результат",ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор)); 
	
	ПараметрыРегламента = Новый Массив;
	ПараметрыРегламента.Добавить(АдресСервера(СерверLLM));
	ПараметрыРегламента.Добавить(ПривестиДиалогКФормату(Чат_История));
	ПараметрыРегламента.Добавить(ПараметрыЧата);            

	ПараметрыЗапроса.Вставить("ПараметрыРегламента", ПараметрыРегламента);
	ПараметрыЗапроса.Вставить("ИмяРегламента", "ВопросВЧат");
    ПараметрыЗапроса.Вставить("МетодКонфигурации", "ВзаимодействиеСLLM.ВопросВЧат");
    ПараметрыЗапроса.Вставить("Результат", ПараметрыЧата.Результат); 
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ПараметрыЗапросаВопрос()

	ПараметрыЗапроса = Новый Структура;

	ПараметрыДиалога = Новый Структура;
	ПараметрыДиалога.Вставить("Модель", МоделиСервера);
	ПараметрыДиалога.Вставить("Результат",ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор)); 

	ПараметрыРегламента = Новый Массив;
	ПараметрыРегламента.Добавить(АдресСервера(СерверLLM));
	ПараметрыРегламента.Добавить(ТекстВопроса);
	ПараметрыРегламента.Добавить(ПараметрыДиалога);            
	
	ПараметрыЗапроса.Вставить("ПараметрыРегламента", ПараметрыРегламента);
	ПараметрыЗапроса.Вставить("ИмяРегламента", "ОбычныйВопрос");
	ПараметрыЗапроса.Вставить("МетодКонфигурации", "ВзаимодействиеСLLM.ВопросВДиалоге");
    ПараметрыЗапроса.Вставить("Результат", ПараметрыДиалога.Результат);
	
	Возврат ПараметрыЗапроса;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияОМоделиНаСервере(МоделиСервера, Сервер)

	Возврат	ВзаимодействиеСLLM.СвойстваВыбраннойМодели(МоделиСервера, АдресСервера(Сервер));
	
КонецФункции

&НаСервереБезКонтекста
Функция УдалитьМодельНаСервере(МоделиСервера, СерверLLM)

	ВзаимодействиеСLLM.УдалитьМодель(МоделиСервера, АдресСервера(СерверLLM));

КонецФункции

&НаСервере
Процедура СпроситьНаСервере()
	
	КонтекстЗапроса = Новый Структура;
	
	ПараметрыЗапроса = МетодыLLM.НайтиСтроки(Новый Структура("Путь", Метод));
	Для каждого тПар из ПараметрыЗапроса[0].Параметры Цикл    
		Если не ЗначениеЗаполнено(тПар.Значение) Тогда
			Продолжить;
		КонецЕсли;
		КонтекстЗапроса.Вставить(тПар.ИмяПараметра, тПар.Значение);	
	КонецЦикла;
	
	ОтветМодели = ВзаимодействиеСLLM.ОтправитьЗапросСерверу(ТипЗапроса, АдресСервера(СерверLLM)+Метод, КонтекстЗапроса);
	ОтветТекст.ДобавитьСтроку(ОтветМодели);
	
	ИнфоОтвета = ПрочитатьЗначениеJSON(ОтветМодели);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСписокМоделей()

	Элементы.МоделиСервера.СписокВыбора.Очистить();
	Элементы.МоделиСервера.СписокВыбора.ЗагрузитьЗначения(СписокМоделейLLM(АдресСервера(СерверLLM))); 	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокМоделейLLM(АдресСервера)

	Возврат ВзаимодействиеСLLM.СписокДоступныхМоделей(АдресСервера);
	
КонецФункции

&НаКлиенте
Процедура РаспечататьСвойства(Свойства, Уровень)
	
	Если ТипЗнч(Свойства) = тип("Соответствие") Тогда
		Для каждого ТекСвойство из Свойства Цикл
			Если МожноПечатать(ТекСвойство.Значение) Тогда
				ОтветТекст.ДобавитьСтроку(НапечататьОтступы(Уровень)+ ТекСвойство.Ключ + " : "+ ТекСвойство.Значение);	
				Продолжить;
			КонецЕсли;                       
			ОтветТекст.ДобавитьСтроку(НапечататьОтступы(Уровень)+ ТекСвойство.Ключ + " : ");
			РаспечататьСвойства(ТекСвойство.Значение, Уровень + 1);
			
		КонецЦикла;
	ИначеЕсли ТипЗнч(Свойства) = тип("Массив") Тогда
		Для каждого ТекСвойство из Свойства Цикл
			Если МожноПечатать(ТекСвойство) Тогда
				ОтветТекст.ДобавитьСтроку(НапечататьОтступы(Уровень) + ТекСвойство);	
				Продолжить;
			КонецЕсли;                       
			
			РаспечататьСвойства(ТекСвойство, Уровень + 1);
			
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОбновитьКомандуВопросаКМодели(ИндексСтатуса)
	
	ПорядокКартинок = Новый Массив;
	ПорядокКартинок.Добавить("ОформлениеКругЗаполненныйНаОднуЧетверть");
	ПорядокКартинок.Добавить("ОформлениеКругЗаполненныйНаДвеЧетверти");
	ПорядокКартинок.Добавить("ОформлениеКругЗаполненныйНаТриЧетверти");
	ПорядокКартинок.Добавить("ОформлениеКругЗаполненный");
	
	Если ИндексСтатуса > ПорядокКартинок.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКартинки = ПорядокКартинок[ИндексСтатуса-1]; 
	
	Элементы.ВопросКМодели.Картинка = БиблиотекаКартинок[ИмяКартинки];
	Элементы.ВопросКМодели.Заголовок = "Подожите" + НапечататьОтступы(ИндексСтатуса);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресСервера(СерверLLM)
	
	Возврат Справочники.СерверыLLM.АдресСервераДляЗапросов(СерверLLM);
	
КонецФункции   

#Область СтроковыеДополнения

&НаКлиенте
Функция МожноПечатать(КакоеТоЗначение)
	
	ТекТип = ТипЗнч(КакоеТоЗначение);
	
	Возврат (ТекТип = Тип("Число") 
	 или ТекТип = Тип("Строка")
	 Или ТекТип = Тип("Булево"));
	
КонецФункции
&НаКлиенте
Функция НапечататьОтступы(Уровень)
	
	Итог = "";
	сч = 0;
	Пока сч<Уровень Цикл
		Итог = Итог + "=";
		сч = сч+1;
	КонецЦикла;	 
	
	Возврат Итог + ">";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВариантыВзаимодействия()
	
	ВариантыВзаимодействияLLM = Новый Массив;
	ВариантыВзаимодействияLLM.Добавить("Вопросы");
	ВариантыВзаимодействияLLM.Добавить("Чат");
	
	Возврат ВариантыВзаимодействияLLM;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаРазделитель()
	
	Возврат "==============================//==============================";
	
КонецФункции
 
 
#КонецОбласти

#Область ТЕСТ_КомандыХРОМАДБ
&НаКлиенте
Процедура вб_ТестСоединения(Команда)
	вб_ТестСоединенияНаСервере();
КонецПроцедуры

&НаСервере
Процедура вб_ТестСоединенияНаСервере()
	Результат = ХромаБД.ВерсияСервера();
	
	ХромаОтветы.ДобавитьСтроку(Результат);
КонецПроцедуры

&НаКлиенте
Процедура вб_СоздатьПространство(Команда)
	вб_СоздатьПространствоНаСервере();
КонецПроцедуры

&НаСервере
Процедура вб_СоздатьПространствоНаСервере()
	Рез = ХромаБД.ДобавитьПространство("myorg2");
	ХромаОтветы.ДобавитьСтроку("" +РЕз.КодОтвета + " - "+ Рез.Ответ);
КонецПроцедуры
#КонецОбласти
#КонецОбласти








